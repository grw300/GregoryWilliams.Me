// Type definitions for devour-client 2.0.7
// Project: https://github.com/twg/devour
// Definitions by: Gregory Williams <https://github.com/grw300>

/** Declaration file generated by dts-gen */
export = devour_client;

declare class devour_client {
    constructor(...args: any[]);

    addSlash(): any;

    all(model: any): any;

    applyErrorMiddleware(promise: any): any;

    applyRequestMiddleware(promise: any): any;

    applyResponseMiddleware(promise: any): any;

    buildPath(): any;

    buildUrl(): any;

    collectionPathFor(modelName: any): any;

    collectionUrlFor(modelName: any): any;

    create(modelName: any, payload: any, ...args: any[]): any;

    define(modelName: any, attributes: any, ...args: any[]): void;

    destroy(...args: any[]): any;

    enableLogging(...args: any[]): void;

    find(modelName: any, id: any, ...args: any[]): any;

    findAll(modelName: any, ...args: any[]): any;

    get(...args: any[]): any;

    insertMiddleware(middlewareName: any, direction: any, newMiddleware: any): any;

    insertMiddlewareAfter(middlewareName: any, newMiddleware: any): void;

    insertMiddlewareBefore(middlewareName: any, newMiddleware: any): void;

    modelFor(modelName: any): any;

    one(model: any, id: any): any;

    patch(payload: any, ...args: any[]): any;

    pathFor(...args: any[]): any;

    post(payload: any, ...args: any[]): any;

    relationships(): any;

    replaceMiddleware(middlewareName: any, newMiddleware: any): void;

    request(url: any, ...args: any[]): any;

    resetBuilder(): void;

    resetMiddleware(): void;

    resourcePathFor(modelName: any, id: any): any;

    resourceUrlFor(modelName: any, id: any): any;

    runMiddleware(req: any): any;

    stackForResource(): any;

    update(modelName: any, payload: any, ...args: any[]): any;

    urlFor(...args: any[]): any;

}
